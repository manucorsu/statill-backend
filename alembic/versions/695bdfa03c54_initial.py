"""initial

Revision ID: 695bdfa03c54
Revises: 
Create Date: 2025-05-22 21:46:38.565103

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '695bdfa03c54'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stores',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(length=60), nullable=False),
    sa.Column('address', sa.String(), nullable=False),
    sa.Column('preorder_enabled', sa.Boolean(), nullable=False),
    sa.Column('ps_enabled', sa.Boolean(), nullable=False),
    sa.Column('days_open', postgresql.ARRAY(sa.BOOLEAN()), nullable=False),
    sa.Column('opening_times', postgresql.ARRAY(postgresql.TIME(timezone=True)), nullable=False),
    sa.Column('closing_times', postgresql.ARRAY(postgresql.TIME(timezone=True)), nullable=False),
    sa.Column('payment_methods', postgresql.ARRAY(sa.BOOLEAN()), nullable=False),
    sa.CheckConstraint('array_length(closing_times, 1) = 7', name='closing_times_length_check'),
    sa.CheckConstraint('array_length(days_open, 1) = 7', name='days_open_length_check'),
    sa.CheckConstraint('array_length(opening_times, 1) = 7', name='opening_times_length_check'),
    sa.CheckConstraint('array_length(payment_methods, 1) = 4', name='payment_methods_length_check'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('first_names', sa.String(length=40), nullable=False),
    sa.Column('last_name', sa.String(length=40), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('birthdate', sa.Date(), nullable=False),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'OTHER', name='gender_enum'), nullable=False),
    sa.Column('res_area', sa.String(length=50), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('store_id', sa.BigInteger(), nullable=True),
    sa.Column('store_role', sa.Enum('CASHIER', 'OWNER', name='store_role_enum'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('products',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('store_id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('brand', sa.String(length=30), nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('type', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reviews',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('store_id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('stars', sa.Integer(), nullable=False),
    sa.Column('desc', sa.String(), nullable=True),
    sa.CheckConstraint('stars IN (1,2,3,4,5)', name='stars_check'),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sales',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('store_id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('payement_method', sa.Integer(), nullable=False),
    sa.Column('timestamp', postgresql.TIME(timezone=True), nullable=False),
    sa.CheckConstraint('payement_method IN (1,2,3,4,5)', name='payement_method_check'),
    sa.ForeignKeyConstraint(['store_id'], ['stores.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('discounts',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('product_id', sa.BigInteger(), nullable=False),
    sa.Column('type', sa.Integer(), nullable=False),
    sa.Column('pct_off', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('days_usable', postgresql.ARRAY(sa.BOOLEAN()), nullable=False),
    sa.Column('condition', sa.JSON(), nullable=False),
    sa.CheckConstraint('array_length(days_usable, 1) = 7', name='days_usable_check'),
    sa.CheckConstraint('pct_off > 0 AND pct_off <= 100', name='pct_off_check'),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('products_sales',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('sale_id', sa.BigInteger(), nullable=False),
    sa.Column('product_id', sa.BigInteger(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['sale_id'], ['sales.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('products_sales')
    op.drop_table('discounts')
    op.drop_table('sales')
    op.drop_table('reviews')
    op.drop_table('products')
    op.drop_table('users')
    op.drop_table('stores')
    # ### end Alembic commands ###
